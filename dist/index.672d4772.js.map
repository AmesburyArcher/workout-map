{"mappings":"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","sources":["script.js"],"sourcesContent":["'use strict';\n\nconst mapDOM = document.querySelector('#map');\nconst form = document.querySelector('.form');\nconst sidebar = document.querySelector('.sidebar');\nconst containerWorkouts = document.querySelector('.workouts');\nconst inputType = document.querySelector('.form__input--type');\nconst inputDistance = document.querySelector('.form__input--distance');\nconst inputDuration = document.querySelector('.form__input--duration');\nconst inputCadence = document.querySelector('.form__input--cadence');\nconst inputElevation = document.querySelector('.form__input--elevation');\n\nclass Workout {\n  clicks = 0;\n\n  constructor(coords, distance, duration, date, id) {\n    this.coords = coords; // [lat, long]\n    this.distance = distance; //km\n    this.duration = duration; //min\n    if (!date && !id) {\n      this.date = new Date();\n      this.id = String(Date.now()).slice(-10);\n    } else {\n      this.date = date;\n      this.id = id;\n    }\n  }\n\n  _setDescription() {\n    const months = [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December',\n    ];\n\n    this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} on ${\n      months[this.date.getMonth()]\n    } ${this.date.getDate()}`;\n  }\n\n  click() {\n    this.clicks++;\n  }\n}\n\nclass Running extends Workout {\n  type = 'running';\n  constructor(coords, distance, duration, cadence, date, id, desc) {\n    super(coords, distance, duration, date, id);\n    this.cadence = cadence;\n    this.calcPace();\n    if (!desc) this._setDescription();\n    else this.description = desc;\n  }\n\n  calcPace() {\n    // min/km\n    this.pace = this.duration / this.distance;\n    return this.pace;\n  }\n}\n\nclass Cycling extends Workout {\n  type = 'cycling';\n  constructor(coords, distance, duration, elevationGain, date, id, desc) {\n    super(coords, distance, duration, date, id);\n    this.elevationGain = elevationGain;\n    this.calcSpeed();\n    if (!desc) this._setDescription();\n    else this.description = desc;\n  }\n\n  calcSpeed() {\n    // km/h\n    this.speed = this.distance / (this.duration / 60);\n    return this.speed;\n  }\n}\n\n////////////////////////////////////////////////////////////////\n//APPLICATION\nclass App {\n  #map;\n  #mapZoomLevel = 13;\n  #mapEvent;\n  #workouts = [];\n  #mapMarkers = [];\n  #sorted = false;\n  constructor() {\n    // get user pos\n    this._getPosition();\n\n    //get data from local storage\n    this._getLocalStorage();\n    //Attach event handlers\n\n    form.addEventListener('submit', this._newWorkout.bind(this));\n    inputType.addEventListener('change', this._toggleElevationField);\n    containerWorkouts.addEventListener('click', this._moveToPopup.bind(this));\n    containerWorkouts.addEventListener('click', this._editForm.bind(this));\n    containerWorkouts.addEventListener(\n      'click',\n      this._submitEditForm.bind(this)\n    );\n    containerWorkouts.addEventListener(\n      'click',\n      this._deleteSelectedWorkout.bind(this)\n    );\n\n    sidebar.addEventListener('click', this._deleteAllWorkouts.bind(this));\n    sidebar.addEventListener(\n      'click',\n      this._sortWorkoutsButtonHandler.bind(this)\n    );\n  }\n\n  _sortWorkoutsButtonHandler(e) {\n    if (!e.target.closest('.sort__workouts__button')) return;\n    //swap sort value\n    this.#sorted = !this.#sorted;\n    this._sortWorkoutsDistance();\n  }\n\n  _sortWorkoutsDistance() {\n    //check whether to sort by increasing, or original order based on App.#sorted value\n    const workoutsArr =\n      this.#sorted === true\n        ? this.#workouts.slice().sort(function (a, b) {\n            return a.distance - b.distance;\n          })\n        : this.#workouts;\n    this._renderAllWorkouts(workoutsArr);\n  }\n\n  _renderAllWorkouts(workoutArr) {\n    // delete and then re-render all workouts based on sorted property\n    const workouts = document.querySelectorAll('.workout');\n    workouts.forEach(work => work.remove());\n    const that = this;\n    workoutArr.forEach(workout => that._renderWorkout(workout));\n  }\n\n  _mapMarkersArrayWatcher() {\n    const container = document.querySelector(\n      '.workout__forms__buttons__container'\n    );\n    //display outer icons if it doesnt already exist and array is populated\n    if (this.#mapMarkers.length > 0) {\n      if (!container) this._displaySortAndDelete();\n    }\n    //remove icons if array is empty\n    if (this.#mapMarkers.length === 0) {\n      if (container) container.remove();\n    }\n  }\n\n  _getPosition() {\n    //get user position\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        this._loadMap.bind(this),\n        function () {\n          alert('Could not get your position');\n        }\n      );\n    }\n  }\n\n  _loadMap(pos) {\n    const { latitude } = pos.coords;\n    const { longitude } = pos.coords;\n    const coords = [latitude, longitude];\n\n    this.#map = L.map('map').setView(coords, this.#mapZoomLevel);\n\n    L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution:\n        '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n    }).addTo(this.#map);\n\n    //Handling clicks on map\n    this.#map.on('click', this._showForm.bind(this));\n\n    this.#workouts.forEach(work => {\n      this._renderWorkoutMarker(work);\n    });\n    //check if icon container needed\n    this._mapMarkersArrayWatcher();\n  }\n\n  _showForm(mapE) {\n    if (mapDOM.classList.contains('ignore')) return;\n    if (mapE) {\n      this.#mapEvent = mapE;\n      this._hideEditButtons(null);\n    }\n    form.classList.remove('hidden');\n    inputDistance.focus();\n  }\n\n  _hideForm() {\n    //Empty inputs\n    inputDistance.value =\n      inputDuration.value =\n      inputCadence.value =\n      inputElevation.value =\n        '';\n    form.style.display = 'none';\n    form.classList.add('hidden');\n    //needed for animation to perform correctly\n    setTimeout(() => (form.style.display = 'grid'), 1000);\n  }\n\n  _hideEditButtons(workout) {\n    const allForms = document.querySelectorAll('.workout');\n    allForms.forEach(form => {\n      if (workout) {\n        if (form.dataset.id !== workout.id) {\n          form.querySelector('.workout__edit__button').style.display = 'none';\n        }\n      } else {\n        form.querySelector('.workout__edit__button').style.display = 'none';\n      }\n    });\n  }\n\n  _displayEditButtons() {\n    const allForms = document.querySelectorAll('.workout');\n    allForms.forEach(\n      form =>\n        (form.querySelector('.workout__edit__button').style.display = 'block')\n    );\n  }\n\n  _hideTrashButtons() {\n    const allForms = document.querySelectorAll('.workout');\n    allForms.forEach(\n      form =>\n        (form.querySelector('.workout__trash__button').style.display = 'none')\n    );\n  }\n\n  _displayTrashButtons() {\n    const allForms = document.querySelectorAll('.workout');\n    allForms.forEach(\n      form =>\n        (form.querySelector('.workout__trash__button').style.display = 'block')\n    );\n  }\n\n  _editForm(e) {\n    /////////////////////////////////////DO ME NEXT\n    if (e.target.closest('.workout__edit')) {\n      //make sure map is rendered first\n      if (this.#mapMarkers.length === 0) return;\n      //Delete the outer icons from DOM\n      const outerIconContainer = document.querySelector(\n        '.workout__forms__buttons__container'\n      );\n      if (outerIconContainer) {\n        outerIconContainer.remove();\n      }\n\n      //Add class to map to remove map event clicks while editing\n      mapDOM.classList.add('ignore');\n      // add class to form to disable submit listener\n      form.classList.add('ignore');\n\n      //selectors\n      const buttonHTML = e.target.closest('.workout__edit');\n      const formDOM = e.target.closest('.workout');\n      //disable dropwdown to change type\n      const dropDown = document.querySelector('.form__input');\n      dropDown.disabled = true;\n\n      const workout = this.#workouts.find(\n        work => work.id === formDOM.dataset.id\n      ); // display form on button click\n\n      // hide all other edit buttons and trash buttons\n      this._hideEditButtons(workout);\n      this._hideTrashButtons();\n\n      // retreive values from stored workout\n      if (workout.type === 'cycling') {\n        this._toggleElevationField();\n        inputType.selectedIndex = 1;\n        inputElevation.value = workout.elevationGain;\n      }\n      if (workout.type === 'running') {\n        inputType.selectedIndex = 0;\n        inputCadence.value = workout.cadence;\n      }\n      inputDistance.value = workout.distance;\n      inputDuration.value = workout.duration;\n      // display values from retreived workout\n      form.classList.remove('hidden');\n\n      // switch edit button to submit button\n      buttonHTML.innerHTML = `\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon__edit__submit\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"#ffffff\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/>\n        <polyline points=\"9 11 12 14 20 6\" />\n        <path d=\"M20 12v6a2 2 0 0 1 -2 2h-12a2 2 0 0 1 -2 -2v-12a2 2 0 0 1 2 -2h9\" />\n      </svg>\n      `;\n      buttonHTML.classList.remove('workout__edit');\n      buttonHTML.classList.add('workout__edit__submit');\n    }\n  }\n\n  _submitEditForm(e) {\n    if (e.target.closest('.workout__edit__submit')) {\n      // selectors\n      const buttonHTML = e.target.closest('.workout__edit__submit');\n      const formDOM = e.target.closest('.workout');\n\n      //find the workout in the stored array\n      const workout = this.#workouts.find(\n        work => work.id === formDOM.dataset.id\n      );\n\n      //update values from new input\n      const newWorkoutType = inputType.value;\n      const newDistance = inputDistance.value;\n      const newDuration = inputDuration.value;\n\n      workout.type = newWorkoutType;\n      workout.distance = newDistance;\n      workout.duration = newDuration;\n\n      if (newWorkoutType === 'running') {\n        const newCadence = inputCadence.value;\n        workout.cadence = newCadence;\n        workout.calcPace();\n      }\n\n      if (newWorkoutType === 'cycling') {\n        const newElevation = inputElevation.value;\n        workout.elevationGain = newElevation;\n        workout.calcSpeed();\n      }\n\n      // show updated list\n      this._renderEditForm(workout, formDOM);\n\n      //remove ignore classlist from form and map\n      form.classList.remove('ignore');\n      mapDOM.classList.remove('ignore');\n\n      // hide and update form\n      const dropDown = document.querySelector('.form__input');\n      dropDown.disabled = false;\n      this._hideForm();\n\n      //update local storage\n      this._setLocalStorage();\n\n      // switch submit back to edit button\n      buttonHTML.innerHTML = `\n        <button type=\"button\" class=\"workout__edit workout__edit__button\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon__edit\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"#ffffff\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                  <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/>\n                  <path d=\"M9 7h-3a2 2 0 0 0 -2 2v9a2 2 0 0 0 2 2h9a2 2 0 0 0 2 -2v-3\" />\n                  <path d=\"M9 15h3l8.5 -8.5a1.5 1.5 0 0 0 -3 -3l-8.5 8.5v3\" />\n                  <line x1=\"16\" y1=\"5\" x2=\"19\" y2=\"8\" />\n                </svg>\n        </button>\n      `;\n\n      // display edit and trash buttons again\n      this._displayEditButtons();\n      this._displayTrashButtons();\n\n      //check for outside icon container\n      this._mapMarkersArrayWatcher();\n    }\n  }\n\n  _toggleElevationField() {\n    inputElevation.closest('.form__row').classList.toggle('form__row--hidden');\n    inputCadence.closest('.form__row').classList.toggle('form__row--hidden');\n  }\n\n  _newWorkout(e) {\n    e.preventDefault();\n    if (form.classList.contains('ignore')) return;\n    const validInputs = (...inputs) =>\n      inputs.every(input => Number.isFinite(input));\n\n    const allPositive = (...inputs) => inputs.every(input => input > 0);\n\n    //Get data from form\n    const type = inputType.value;\n    const distance = +inputDistance.value;\n    const duration = +inputDuration.value;\n    const { lat, lng } = this.#mapEvent.latlng;\n    let workout;\n    //if running, create running object\n    if (type === 'running') {\n      const cadence = +inputCadence.value;\n      // check if data is valid\n      if (\n        !validInputs(distance, duration, cadence) ||\n        !allPositive(distance, duration, cadence)\n      )\n        return alert('Inputs have to be positive numbers!');\n\n      workout = new Running([lat, lng], distance, duration, cadence);\n    }\n\n    //if cycling, create cycling object\n    if (type === 'cycling') {\n      const elevation = +inputElevation.value;\n      if (\n        !validInputs(distance, duration, elevation) ||\n        !allPositive(distance, duration)\n      )\n        return alert('Inputs have to be positive numbers!');\n      workout = new Cycling([lat, lng], distance, duration, elevation);\n    }\n\n    //add new object to workout array\n    this.#workouts.push(workout);\n\n    //render workout on map as marker\n    this._renderWorkoutMarker(workout);\n    //render workout on list\n    this._renderWorkout(workout);\n    //Clear input fields\n    this._hideForm();\n    // set local storage to all workouts\n    this._setLocalStorage();\n    //display edit buttons\n    this._displayEditButtons();\n    // check if need to update icon container\n    this._mapMarkersArrayWatcher();\n  }\n\n  _renderEditForm(workout, form) {\n    form.classList.remove('workout--running');\n    form.classList.remove('workout--cycling');\n    form.classList.add(`workout--${workout.type}`);\n    let html = `\n          <h2 class=\"workout__title\">\n            ${workout.description}\n            <div class=\"workout__button__container\">\n              <button type=\"button\" class=\"workout__trash workout__trash__button\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon__trash\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"#ffffff\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                  <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/>\n                  <line x1=\"4\" y1=\"7\" x2=\"20\" y2=\"7\" />\n                  <line x1=\"10\" y1=\"11\" x2=\"10\" y2=\"17\" />\n                  <line x1=\"14\" y1=\"11\" x2=\"14\" y2=\"17\" />\n                  <path d=\"M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2 -2l1 -12\" />\n                  <path d=\"M9 7v-3a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v3\" />\n                </svg>\n              </button>\n              <button type=\"button\" class=\"workout__edit workout__edit__button\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon__edit\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"#ffffff\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                  <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/>\n                  <path d=\"M9 7h-3a2 2 0 0 0 -2 2v9a2 2 0 0 0 2 2h9a2 2 0 0 0 2 -2v-3\" />\n                  <path d=\"M9 15h3l8.5 -8.5a1.5 1.5 0 0 0 -3 -3l-8.5 8.5v3\" />\n                  <line x1=\"16\" y1=\"5\" x2=\"19\" y2=\"8\" />\n                </svg>\n              </button>\n            </div>\n          </h2>\n          <div class=\"workout__details\">\n            <span class=\"workout__icon\">${\n              workout.type === 'running' ? '🏃‍♂️' : '🚴‍♀️'\n            }</span>\n            <span class=\"workout__value workout__distance\">${\n              workout.distance\n            }</span>\n            <span class=\"workout__unit\">km</span>\n          </div>\n          <div class=\"workout__details\">\n            <span class=\"workout__icon\">⏱</span>\n            <span class=\"workout__value workout__duration\">${\n              workout.duration\n            }</span>\n            <span class=\"workout__unit\">min</span>\n          </div>\n        `;\n    if (workout.type === 'running') {\n      html += `\n            <div class=\"workout__details\">\n              <span class=\"workout__icon\">⚡️</span>\n              <span class=\"workout__value workout__pace\">${workout.pace.toFixed(\n                1\n              )}</span>\n              <span class=\"workout__unit workout__unit__frequency\">min/km</span>\n            </div>\n            <div class=\"workout__details\">\n              <span class=\"workout__icon\">🦶🏼</span>\n              <span class=\"workout__value workout__cadence\">${\n                workout.cadence\n              }</span>\n              <span class=\"workout__unit\">spm</span>\n            </div>\n          `;\n    }\n    if (workout.type === 'cycling') {\n      html += `\n          <div class=\"workout__details\">\n            <span class=\"workout__icon\">⚡️</span>\n            <span class=\"workout__value workout__speed\">${workout.speed.toFixed(\n              1\n            )}</span>\n            <span class=\"workout__unit workout__unit__frequency\">km/h</span>\n          </div>\n          <div class=\"workout__details\">\n            <span class=\"workout__icon\">⛰</span>\n            <span class=\"workout__value workout__elevation\">${\n              workout.elevationGain\n            }</span>\n            <span class=\"workout__unit\">m</span>\n          </div>\n        `;\n    }\n    form.innerHTML = html;\n  }\n\n  _renderWorkoutMarker(workout) {\n    const marker = L.marker(workout.coords)\n      .addTo(this.#map)\n      .bindPopup(\n        L.popup({\n          maxWidth: 250,\n          minWidth: 100,\n          autoClose: false,\n          closeOnClick: false,\n          className: `${workout.type}-popup`,\n        })\n      )\n      .setPopupContent(\n        `${workout.type === 'running' ? '🏃‍♂️' : '🚴‍♀️'} ${workout.description}`\n      )\n      .openPopup();\n    this.#mapMarkers.push(marker);\n  }\n\n  _renderWorkout(workout) {\n    let html = `\n    <li class=\"workout workout--${workout.type}\" data-id=\"${workout.id}\">\n          <h2 class=\"workout__title\">\n            ${workout.description}\n            <div class=\"workout__button__container\">\n              <button type=\"button\" class=\"workout__trash workout__trash__button\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon__trash\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"#ffffff\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                  <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/>\n                  <line x1=\"4\" y1=\"7\" x2=\"20\" y2=\"7\" />\n                  <line x1=\"10\" y1=\"11\" x2=\"10\" y2=\"17\" />\n                  <line x1=\"14\" y1=\"11\" x2=\"14\" y2=\"17\" />\n                  <path d=\"M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2 -2l1 -12\" />\n                  <path d=\"M9 7v-3a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v3\" />\n                </svg>\n              </button>\n              <button type=\"button\" class=\"workout__edit workout__edit__button\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon__edit\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"#ffffff\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                  <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/>\n                  <path d=\"M9 7h-3a2 2 0 0 0 -2 2v9a2 2 0 0 0 2 2h9a2 2 0 0 0 2 -2v-3\" />\n                  <path d=\"M9 15h3l8.5 -8.5a1.5 1.5 0 0 0 -3 -3l-8.5 8.5v3\" />\n                  <line x1=\"16\" y1=\"5\" x2=\"19\" y2=\"8\" />\n                </svg>\n              </button>\n            </div>\n          </h2>\n          <div class=\"workout__details\">\n            <span class=\"workout__icon\">${\n              workout.type === 'running' ? '🏃‍♂️' : '🚴‍♀️'\n            }</span>\n            <span class=\"workout__value workout__distance\">${\n              workout.distance\n            }</span>\n            <span class=\"workout__unit\">km</span>\n          </div>\n          <div class=\"workout__details\">\n            <span class=\"workout__icon\">⏱</span>\n            <span class=\"workout__value workout__duration\">${\n              workout.duration\n            }</span>\n            <span class=\"workout__unit\">min</span>\n          </div>\n\n          `;\n    if (workout.type === 'running') {\n      html += `\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">⚡️</span>\n          <span class=\"workout__value workout__pace\">${workout.pace.toFixed(\n            1\n          )}</span>\n          <span class=\"workout__unit workout__unit__frequency\">min/km</span>\n        </div>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">🦶🏼</span>\n          <span class=\"workout__value workout__cadence\">${\n            workout.cadence\n          }</span>\n          <span class=\"workout__unit\">spm</span>\n        </div>\n    </li>\n        `;\n    }\n    if (workout.type === 'cycling') {\n      html += `\n      <div class=\"workout__details\">\n        <span class=\"workout__icon\">⚡️</span>\n        <span class=\"workout__value workout__speed\">${workout.speed.toFixed(\n          1\n        )}</span>\n        <span class=\"workout__unit workout__unit__frequency\">km/h</span>\n      </div>\n      <div class=\"workout__details\">\n        <span class=\"workout__icon\">⛰</span>\n        <span class=\"workout__value workout__elevation\">${\n          workout.elevationGain\n        }</span>\n        <span class=\"workout__unit\">m</span>\n      </div>\n    </li> \n      `;\n    }\n    form.insertAdjacentHTML('afterend', html);\n  }\n\n  _moveToPopup(e) {\n    //clauses to disable moving\n    if (e.target.closest('.workout__trash__button')) return;\n    if (this.#mapMarkers.length === 0) return;\n\n    const workoutEl = e.target.closest('.workout');\n\n    if (!workoutEl) return;\n\n    const workout = this.#workouts.find(\n      work => work.id === workoutEl.dataset.id\n    );\n\n    //focus the map on the selected workout clicked from sidebar\n    this.#map.setView(workout.coords, this.#mapZoomLevel, {\n      animate: true,\n      pan: {\n        duration: 1,\n      },\n    });\n  }\n\n  _deleteSelectedWorkout(e) {\n    if (e.target.closest('.workout__trash__button')) {\n      // need to make sure markers are loaded in before being able to delete\n      if (this.#mapMarkers.length === 0) return;\n\n      const formDOM = e.target.closest('.workout');\n\n      //find workout in array\n      const workout = this.#workouts.find(\n        work => work.id === formDOM.dataset.id\n      );\n      // get index\n      const workoutIndex = this.#workouts.findIndex(work => work === workout);\n      // find marker in stored marker array\n      const [lat, lng] = workout.coords;\n      const marker = this.#mapMarkers.find(\n        mark => lat === mark._latlng.lat && lng === mark._latlng.lng\n      );\n      const markerIndex = this.#mapMarkers.findIndex(mark => mark === marker);\n\n      //remove various elements\n      formDOM.remove();\n      this.#map.removeLayer(marker);\n      this.#workouts.splice(workoutIndex, 1);\n      this.#mapMarkers.splice(markerIndex, 1);\n      //update local storage\n      this._setLocalStorage();\n      // check if need to update outside icon container\n      this._mapMarkersArrayWatcher();\n    }\n  }\n\n  _deleteAllWorkouts(e) {\n    if (e.target.closest('.workouts__all__trash__button')) {\n      //set this to App\n      const that = this;\n      // loop through all workouts to remove markers from map\n      that.#workouts.forEach((work, i) => {\n        const [lat, lng] = work.coords;\n\n        const markerIndex = that.#mapMarkers.findIndex(\n          mark => lat === mark._latlng.lat && lng === mark._latlng.lng\n        );\n        const marker = that.#mapMarkers[markerIndex];\n\n        that.#map.removeLayer(marker);\n      });\n      //delete all traces of workouts in app\n      that.#mapMarkers.splice(0, that.#mapMarkers.length);\n      that.#workouts.splice(0, that.#workouts.length);\n      const formsDOM = document.querySelectorAll('.workout');\n      formsDOM.forEach(form => form.remove());\n      //update storage\n      that._setLocalStorage();\n      //toggle outer icons visibility\n      that._mapMarkersArrayWatcher();\n    }\n  }\n\n  _displaySortAndDelete() {\n    //create outer icons buttons\n    const sortDOM = `\n    <button class=\"sort__workouts__button\" type=\"button\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon__sort\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"#ffffff\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/>\n        <path d=\"M3 9l4 -4l4 4m-4 -4v14\" />\n        <path d=\"M21 15l-4 4l-4 -4m4 4v-14\" />\n      </svg>\n    </button>\n    `;\n\n    const deleteDOM = `\n      <button class=\"workouts__all__trash__button\" type=\"button\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon__trash\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"#ffffff\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n          <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/>\n          <line x1=\"4\" y1=\"7\" x2=\"20\" y2=\"7\" />\n          <line x1=\"10\" y1=\"11\" x2=\"10\" y2=\"17\" />\n          <line x1=\"14\" y1=\"11\" x2=\"14\" y2=\"17\" />\n          <path d=\"M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2 -2l1 -12\" />\n          <path d=\"M9 7v-3a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v3\" />\n        </svg>\n      </button>\n    `;\n\n    //append button to container\n    const container = document.createElement('div');\n    container.classList.add('workout__forms__buttons__container');\n    container.insertAdjacentHTML('afterbegin', sortDOM);\n    container.insertAdjacentHTML('afterbegin', deleteDOM);\n\n    const logoDOM = document.querySelector('.logo');\n    logoDOM.after(container);\n  }\n\n  _createWorkoutFromLocalStorage(arr) {\n    //recreate objects stored in local storage upon reload\n    arr.forEach(function (workout) {\n      const type = workout.type;\n      const duration = workout.duration;\n      const distance = workout.distance;\n      const [lat, lng] = workout.coords;\n\n      let newWorkout;\n      if (type === 'running') {\n        const cadence = workout.cadence;\n\n        newWorkout = new Running(\n          [lat, lng],\n          distance,\n          duration,\n          cadence,\n          workout.date,\n          workout.id,\n          workout.description\n        );\n      }\n      if (type === 'cycling') {\n        const elevation = workout.elevationGain;\n\n        newWorkout = new Cycling(\n          [lat, lng],\n          distance,\n          duration,\n          elevation,\n          workout.date,\n          workout.id,\n          workout.description\n        );\n      }\n      //populate workouts array with recreated workout objects\n      this.#workouts.push(newWorkout);\n    }, this);\n  }\n\n  _setLocalStorage() {\n    localStorage.setItem('workouts', JSON.stringify(this.#workouts));\n  }\n\n  _getLocalStorage() {\n    const data = JSON.parse(localStorage.getItem('workouts'));\n\n    if (!data) return;\n    this._createWorkoutFromLocalStorage(data);\n    this.#workouts.forEach(work => {\n      this._renderWorkout(work);\n    });\n  }\n\n  // method available to reset local storage\n  reset() {\n    localStorage.removeItem('workouts');\n    location.reload();\n  }\n}\n\nconst app = new App();\n"],"names":[],"version":3,"file":"index.672d4772.js.map","sourceRoot":"/__parcel_source_root/"}